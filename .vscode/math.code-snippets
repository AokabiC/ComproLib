{
    "gcd_lcm": {
        "prefix": "gcd_lcm",
        "body": [
          "LL gcd(LL a, LL b){",
          "    if(a < b) swap(a, b);",
          "    if(b == 0) return a;",
          "    return gcd(b, a%b);",
          "}",
          "",
          "LL lcm(LL a, LL b){",
          "    return a*b/gcd(a,b);",
          "}"
        ],
        "description": "gcd_lcm"
    },
    "modint": {
        "prefix": "modint",
        "body": [
            "template<int mod>",
            "struct ModInt {",
            "    int x;",
            "",
            "    ModInt() : x(0) {}",
            "    ModInt(long long y) : x(y >= 0 ? y % mod : (mod - (-y) % mod) % mod) {}",
            "",
            "    ModInt &operator+=(const ModInt &p) {",
            "        if((x += p.x) >= mod) x -= mod;",
            "        return *this;",
            "    }",
            "    ModInt &operator-=(const ModInt &p) {",
            "        if((x += mod - p.x) >= mod) x -= mod;",
            "        return *this;",
            "    }",
            "    ModInt &operator*=(const ModInt &p) {",
            "        x = (int)(1LL * x * p.x % mod);",
            "        return *this;",
            "    }",
            "    ModInt &operator/=(const ModInt &p) {",
            "        *this *= p.inverse();",
            "        return *this;",
            "    }",
            "",
            "    ModInt operator-() const { return ModInt(-x); }",
            "    ModInt operator+(const ModInt &p) const { return ModInt(*this) += p; }",
            "    ModInt operator-(const ModInt &p) const { return ModInt(*this) -= p; }",
            "    ModInt operator*(const ModInt &p) const { return ModInt(*this) *= p; }",
            "    ModInt operator/(const ModInt &p) const { return ModInt(*this) /= p; }",
            "",
            "    bool operator==(const ModInt &p) const { return x == p.x; }",
            "    bool operator!=(const ModInt &p) const { return x != p.x; }",
            "",
            "    ModInt inverse() const{",
            "        int a = x, b = mod, u = 1, v = 0, t;",
            "        while(b > 0) {",
            "            t = a / b;",
            "            a -= t * b;",
            "            swap(a, b);",
            "            u -= t * v;",
            "            swap(u, v);",
            "        }",
            "        return ModInt(u);",
            "    }",
            "",
            "    ModInt pow(int e){",
            "        long long a = 1, p = x;",
            "        while(e > 0) {",
            "            if(e%2 == 0) {p = (p*p) % mod; e /= 2;}",
            "            else {a = (a*p) % mod; e--;}",
            "        }",
            "        return ModInt(a);",
            "    }",
            "",
            "    friend ostream &operator<<(ostream &os, const ModInt<mod> &p) {",
            "        return os << p.x;",
            "    }",
            "    friend istream &operator>>(istream &is, ModInt<mod> &a) {",
            "        long long x;",
            "        is >> x;",
            "        a = ModInt<mod>(x);",
            "        return (is);",
            "    }",
            "};",
            "",
            "const int mod = 1e9 + 7;",
            "using modint = ModInt<mod>;",
            ""
        ],
        "description": "modint"
    },
    "FastFourierTransform": {
        "prefix": "FastFourierTransform",
        "body": [
          "// https://ei1333.github.io/luzhiled/snippets/math/fast-fourier-transform.html",
          "namespace FastFourierTransform {",
          "    using real = double;",
          "",
          "    struct C {",
          "        real x, y;",
          "        C() : x(0), y(0) {}",
          "        C(real x, real y) : x(x), y(y) {}",
          "        inline C operator+(const C &c) const { return C(x + c.x, y + c.y); }",
          "        inline C operator-(const C &c) const { return C(x - c.x, y - c.y); }",
          "        inline C operator*(const C &c) const { return C(x * c.x - y * c.y, x * c.y + y * c.x); }",
          "        inline C conj() const { return C(x, -y); }",
          "    };",
          "",
          "    const real PI = acosl(-1);",
          "    int base = 1;",
          "    vector< C > rts = { {0, 0},",
          "                        {1, 0} };",
          "    vector< int > rev = {0, 1};",
          "",
          "",
          "    void ensure_base(int nbase) {",
          "        if(nbase <= base) return;",
          "        rev.resize(1 << nbase);",
          "        rts.resize(1 << nbase);",
          "        for(int i = 0; i < (1 << nbase); i++) {",
          "            rev[i] = (rev[i >> 1] >> 1) + ((i & 1) << (nbase - 1));",
          "        }",
          "        while(base < nbase) {",
          "        real angle = PI * 2.0 / (1 << (base + 1));",
          "        for(int i = 1 << (base - 1); i < (1 << base); i++) {",
          "            rts[i << 1] = rts[i];",
          "            real angle_i = angle * (2 * i + 1 - (1 << base));",
          "            rts[(i << 1) + 1] = C(cos(angle_i), sin(angle_i));",
          "        }",
          "            ++base;",
          "        }",
          "    }",
          "",
          "    void fft(vector< C > &a, int n) {",
          "        assert((n & (n - 1)) == 0);",
          "        int zeros = __builtin_ctz(n);",
          "        ensure_base(zeros);",
          "        int shift = base - zeros;",
          "        for(int i = 0; i < n; i++) {",
          "            if(i < (rev[i] >> shift)) {",
          "                swap(a[i], a[rev[i] >> shift]);",
          "            }",
          "        }",
          "        for(int k = 1; k < n; k <<= 1) {",
          "            for(int i = 0; i < n; i += 2 * k) {",
          "                for(int j = 0; j < k; j++) {",
          "                C z = a[i + j + k] * rts[j + k];",
          "                a[i + j + k] = a[i + j] - z;",
          "                a[i + j] = a[i + j] + z;",
          "                }",
          "            }",
          "        }",
          "    }",
          "",
          "    vector< int64_t > multiply(const vector< int > &a, const vector< int > &b) {",
          "        int need = (int) a.size() + (int) b.size() - 1;",
          "        int nbase = 1;",
          "        while((1 << nbase) < need) nbase++;",
          "        ensure_base(nbase);",
          "        int sz = 1 << nbase;",
          "        vector< C > fa(sz);",
          "        for(int i = 0; i < sz; i++) {",
          "            int x = (i < (int) a.size() ? a[i] : 0);",
          "            int y = (i < (int) b.size() ? b[i] : 0);",
          "            fa[i] = C(x, y);",
          "        }",
          "        fft(fa, sz);",
          "        C r(0, -0.25 / (sz >> 1)), s(0, 1), t(0.5, 0);",
          "        for(int i = 0; i <= (sz >> 1); i++) {",
          "            int j = (sz - i) & (sz - 1);",
          "            C z = (fa[j] * fa[j] - (fa[i] * fa[i]).conj()) * r;",
          "            fa[j] = (fa[i] * fa[i] - (fa[j] * fa[j]).conj()) * r;",
          "            fa[i] = z;",
          "        }",
          "        for(int i = 0; i < (sz >> 1); i++) {",
          "            C A0 = (fa[i] + fa[i + (sz >> 1)]) * t;",
          "            C A1 = (fa[i] - fa[i + (sz >> 1)]) * t * rts[(sz >> 1) + i];",
          "            fa[i] = A0 + A1 * s;",
          "        }",
          "        fft(fa, sz >> 1);",
          "        vector< int64_t > ret(need);",
          "        for(int i = 0; i < need; i++) {",
          "            ret[i] = llround(i & 1 ? fa[i >> 1].y : fa[i >> 1].x);",
          "        }",
          "        return ret;",
          "    }",
          "};",
          "// auto C = FastFourierTransform::multiply(A, B);",
          ""
        ],
        "description": "FastFourierTransform"
    }
}