{
    // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
    // Placeholders with the same ids are connected.
    // Example:
    // "Print to console": {
    // 	"scope": "javascript,typescript",
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    "UnionFind": {
        "prefix": "UnionFind",
        "body": [
            "struct UnionFind{",
            "    vector<int> data;",
            "",
            "    UnionFind(int sz){",
            "        data.assign(sz, -1);",
            "    }",
            "",
            "    bool unite(int x, int y){",
            "        x = find(x), y = find(y);",
            "        if(x == y) return(false);",
            "        if(data[x] > data[y]) swap(x, y);",
            "        data[x] += data[y];",
            "        data[y] = x;",
            "        return(true);",
            "    }",
            "",
            "    int find(int k){",
            "        if(data[k] < 0) return(k);",
            "        return(data[k] = find(data[k]));",
            "    }",
            "",
            "    int size(int k){",
            "        return(-data[find(k)]);",
            "    }",
            "};"
        ],
        "description": "UnionFind"
    }
}